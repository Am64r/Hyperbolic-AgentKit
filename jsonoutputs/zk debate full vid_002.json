[
  {
    "speaker": "Guest",
    "content": "and the ability of projects to to expand on areas where where the bootstrap constraints don't matter will uh will make sense."
  },
  {
    "speaker": "Andy",
    "content": "Interesting point on the auditability you may don't know if you if if you wanna comment on that specifically. Um because I think that's it's uh it's a it's it's kind of an interesting uh thought with regards to how how these audits are being are taking place and also just like the discoverability of errors. um Um which which I think is interesting. And then you make if you wanna make any comments on that I'd like to ask you uh specifically about uh some components of of your post as well. Um so let us know if you have any comments there."
  },
  {
    "speaker": "Guest",
    "content": "Yeah, regarding the auditability, it's um like your point, well, I guess I'm not I guess I'm not like a hundred percent sure about the point, but I guess my view on this is like, auditing an easy case system is super complex. And so if you hire, you know, a team of cryptographers to make a bespoke ZK circuit um I think it becomes much harder to audit that than for example, an application built on top of a ZK VM. uh For example, with our ZK VM SP1, we've gotten many audits for it at this point, we've gotten we've had a public code competition for it. Um we've spent getting audits is extremely expensive and then the auditing compounds over time, right? So like as you know, we use it more um and then we design upgrades to the protocol. There's more and more pairs of eyes looking at the code base and I think the security and auditability story just gets better over time. If you're making a custom ZK circuit for your use case, often you have actually a very similar amount of complexity um to, for example a ZK VM of even for for example, if you're trying to verify signatures or something like that. There's a lot of complex logic that goes into, you know, making non-native field arithmetic working as the case circuit or all these things and you know, it obviously you're not gonna spend as much money auditing one circuit versus one ZK VM that a lot more people use. Obviously you're not gonna have the same number of auditors or the same pairs of eyes on the code for a custom ZK circuit for that is just much more limited in scope versus a ZK VM that a lot of people use across a lot of different applications. Um I think the beauty of a ZK VM is that it is a really general platform where it can benefit a bunch of different applications, right? So, who can use SP1? I mean, basically anything in crypto. Like roll ups can use it, bridges can use it. And then basically any use case can use SP1. And so everyday we're really motivated to wake up, go into the office and make SP1 like 10% better and we know that when we make it better everyone benefits. And similar similar to that, like, for our auditors, they know that when they're auditing SP1 that's an audit that benefits the entire ecosystem and other people using SP1 and that means we can invest more in audits, we can invest more in security, more people can look at the code, more people have an interest in looking at the code as well. Um like there's a lot of different teams that have you know, taken SP1, forked it like in a friendly way, uh added their own pre compiles, um you know, try to do their own optimization and I think through that, they're also looking at the code as well. And so, overall I think the security and auditability story for ZK VM because it's such a general platform is like a lot better than anything that's built custom. Almost, I would say definitionally. Um perhaps like if you're building an extremely simple circuit that's like, you know, you know tens of cons you know, maybe not tens of constraints, but like tens of thousands of constraints, or like very, very few lines of code built on an existing um circuit framework. It's been used for a long time, so for example, Surcom. Then maybe I would say you could like audit that securely. Like for example, I think the Tornado Cash circuits are extremely simple and something that um, are by this point given you know, how much money is been staked at Tornado Cash, um, something that is very reliable, very secure, and we can all feel very good about, but I think for any other application, that's like, more complex, um the ZK VM security story looks a lot better."
  },
  {
    "speaker": "Rob",
    "content": "I have a few um points of response to that. Thanks Uma. So, one is, I think I wanted to explain my point a little bit better about the about auditability. So, the the the core aspect I meant is connected to the various levels of secu security a proof system can have, right? There is no secure, not secure kind of a situation there. There are levels of security, right? So something can be only secure to an extent that there can be an application that is fine with that. uh But there can be application where you're worried about bigger kind of attacks that you need higher levels of security. Specifically, in uh in in in if if you look at uh if you look at analysis and written analysis of security uh of proof systems, for example, Groth 16, right? Groth 16 is not um it doesn't have the highest level of security. It has uh know know the so-called knowledge soundness and the highest level of security is simulation extractability. There there just I think they're named very badly. They don't tell us very much, but but let me try to explain very uh in in in an intuitive manner, what what exactly these two levels of security mean. The lower level of security pre pretty much uh captures the notion of soundness that you you you you try to convince a person of the variety of a statement, you're not able to convince that person of a wrong statement. Uh that is the basic level of security, right? The higher level of security is non-malleability that let's say, Andy gives me uh a proof, then in a man in the middle attack when I'm when I'm playing when when when me I'm talking to Uma, I shouldn't be able to transform the the proof from Andy and fake it to come from my way. I don't have a witness. I'm not able to generate that proof. But Andy gave me the proof, so I have something to begin with, I can transform it, mold it, and give it to Uma. This is the non-malleability attack. This is the This is like the man in the middle attack, the HTTPS security, all all they are all related, right? The So, summarizing there are multiple levels of security um and and even Groth 16 for example, doesn't have that higher degree of security and there are applications where it makes sense. Where it is important that you have that non-malleability, um uh where you can actually uh uh create havoc if you're able to mold somebody else's proof as yours. And when uh when that level of security is required, when my my point is that my point is that our audits our our our ZK base is is going at such a pace that we we rightfully I I think this is the right way to go still. I'll I'll I'll say I'll I'll explain why, but but I think the way the the pace at which we are going doesn't allow us the the time required to ana ana analyze the level of security of these proof systems, and also for the for on on the application side for the applications to think about what is the right level of security that they want because they are because it it's just the state of it's just the the it's just the world we are living in, right? Applications they are not ZK experts, that is why Uma and and other other Uma's teams and other teams are helping these teams to embrace ZK without knowing ZK without having to think about these uh uh uh this this detail in in depth without having to think about the security aspects in depth. So, it's very natural. These all projects are not thinking about uh the the security aspects. As a result, my question is what what what does these um so what what what do these audits really tell us? What do these audits uh give assurance to these applications on? Imagine an application that needs higher level of security but but but a ZK has doesn't have that a ZK proof system doesn't have that level of security. Then what does this audit give us? What what does the result of these audits give us? That that was my uh main uh point. Um let me make a couple of further quick points that um, while it remains true that the the uh the amount of brain power, the the number of eyes that a ZK VM can get can compoundly affect a large number of people. It uh a mirrored argument holds true for tools that can be built to make custom circuits easier to build. If more people and more people and more people are building uh are are advancing the area the the area of tools to build custom circuits, it remains the same. So um just the way we didn't just the way we learned our lesson from not questioning uh our ability to build something as beautiful as ZK VMs, I think we shouldn't question the ability of our industry to build amazing tools that can help us easily build efficient custom ZK circuits. Um and uh and one last point is that just the way, again, there is a mirrored uh argument, just the way ZK VMs can impact the en entire world in the the entire people."
  }
]