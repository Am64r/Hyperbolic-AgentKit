[
  {
    "speaker": "Andy",
    "content": "Welcome back to EigenLayer Unlocked for an episode today about the idea of FHE, which is fully homomorphic encryption with Remy from Inco. Remy, welcome on today. Uh, looking forward to it."
  },
  {
    "speaker": "Remi",
    "content": "Yeah, thanks for having me, excited to talk about FHE and also broadly speaking what we're building here."
  },
  {
    "speaker": "Andy",
    "content": "Yeah, man. Looking forward to learning how you guys utilize EigenLayer um, amongst this kind of broader series and dive into some of the lower-level technical architecture. So, whenever you're ready, let's jump in."
  },
  {
    "speaker": "Remi",
    "content": "Yeah, absolutely. So, you know, from a high level I'll introduce sort of, you know, the problem we're trying to solve here, uh, but also sort of what FHE is. And then towards the end I can go more towards like the use cases because ultimately, you know, for anyone building infra, what truly matters is what can people actually build with this, right? Uh, so what we're building is what we call the Universal Confidential Computing Network. And so, the problem we're trying to solve is, you know, today, all the layer one, layer twos have one thing in common. They're all transparent databases. And so, we actually believe that, you know, in order to have mass adoption, you actually need a minimum of confidentiality. So, just a couple examples. Today, when you use crypto as your bank account or for payroll, everything is transparent. And if you were to onboard the billion people through crypto systems today, it would almost be unusable because it would be social chaos. It means that, you know, your neighbor knows how much money you have, um, everyone within your company knows how much you're getting paid. It's not how, you know, web two works because there are social sort of like rules that, you know, we we need to feel comfortable, you know, with this private information and this is just not feasible today in in in web three. And second, there are, you know, uh, institutions and enterprises who have explored at the idea of, you know, private blockchains in the past, you know, Hyperledger, R3 Corda uh, re-, you know, solving this problem of like, you know, con- confidentiality. But these are not quite the same because these private blockchains cannot interoperate with, you know, the other public blockchains. They also don't have into, you know, the same, uh, amount of liquidity or user, user base. And, and lastly, you know, just institutions and enterprises have, you know, compliance rules, trade secrets, it doesn't quite make sense for them to move to public blockchains. And then lastly, there are just a lot of use cases that wouldn't make sense without any hidden information. So think of the card games, uh, private voting, uh, blind auction, this idea of hidden information is just part of, you know, uh, how you build things in general, even in web two, right? So if you want to build something like eBay, uh, you have to hide, you know, people's bids, right? So this idea of shielded states or shielded private states is a very necessary component. So, so it's beyond privacy, right? So, what we're building in Inco is what we believe to be the missing layer of the blockchain stack, the confidential computing layer. So it's very similar to, you know, if you think about the existing layers like execution, settlement, DA, uh, we're very much, you know, our own stock here, our own layer. And, and, and I'll explain a little bit more later on why we are our own layer here. Uh, but we, we utilize a cryptography called FHE. So, uh, for folks who have never heard of this term before, it's a very different type of cryptography compared to ZK. What FHE does is one thing and one thing really well is the ability to encrypt data but also allow you to compute on top of it without having to decrypt. So it almo- it almost sounds like magic, right? Im- imagine like you have this cat picture. You can encrypt this cat picture, you're still able to manipulate every single pixel because ultimately there are RGB values, right? There are just integers. You can still add, divide, multiply on top of these in- individual pixels without seeing what it is and by the time you decrypt now you have a magical filter. So, so this is really what FHE really does, uh, the core is really just the ability for you to do compute on top of encrypted data. So normally you can do computation, you know, operations like additions. You can also do comparisons, uh, which are quite useful for, you know, certain applications I can dive into later. So, you know, the idea of FHE is not new. It's been around us for almost 40 years now. It actually started from the 70s. Uh, back then, you know, the concept was pure fantasy. It was like, more around like what if we could compute on top of encrypted data, right? It was just a wild fantasy. And so this concept of privacy homomorphisms started back in the 70s. And then the first, uh, I would say, re- realistic proof that this was somewhat feasible was towards the end of the 90s with partial uh, homomorphic encryption where you could do simple additions, um, and the breakthrough was done by Pascal Paillier, uh, a, a, a legend in space and the next breakthrough really came much later back in 2009 where Craig Gentry introduced this concept of bootstrapping. So, I'll explain quickly like why this was so challenging. When you do FHE operations, you do them on top of something called ciphertexts. So a ciphertext is the encrypted data. So, uh, you you can see the picture on the left here. A ciphertext is composed of, you know, the actual data with some data padding, some noise, and no- noise padding. And so when you compute on top of these ciphertexts, what happens is this noise will keep on growing and so it overflows and this ciphertext is no longer valid because of it. So bootstrapping, you can think of it as a way to denoise in between operations so that you can keep this noise in check so you can continuously do operations on top of this encrypted data without this becoming, uh, uh, unusable. So, so this is the breakthrough that Craig uh, came out back in 2009, which, which was a pretty big deal, uh, back in the days. Uh, but this process was still very slow. It was very costly and slow process. So still making FHE difficult to be practical. And fast forward, another breakthrough happened back in 2021 called programmable bootstrapping. So what it is really, it's a fast stable lookup that allows you to do bootstrapping at a much faster pace in tens of milliseconds. And, and so now suddenly FHE becomes a lot more practical, uh, because of it. Uh, one thing I'd like to mention is, you know, the way to think about FHE is FHE is compute bound, so meaning that, you know, it's it is quite computationally intensive, uh, but it is solvable with more hardware. So, you know, today, you can use it, uh, to compute with, you know, CPU, uh, GPU will be faster and there are specialized hardware that will come out very soon. There are actually dozens of companies working on on these hardware, uh, for for years actually and then a lot of them are coming out to the market next year. These are specialized A6, um, you can, you know, similar to Bitcoin they, they're basically specialized machines that are more, uh, that can run basically specific cryptographies more efficiently. And, and so essentially the way to accelerate FHE is really through compute and, you know, with the specialized hardware things will always get, you know, faster and cheaper over time. And so this is different a little bit different from, you know, some other uh, you know, system that might be, you know, network dependent, for example MPC because for every single compute, uh, or specific operations you need the, the nodes to talk to each other, ultimately you are, so you're like, you know, bound by the networking time because that's you can't go faster than speed of light, right? So at some points with the distance, the different nodes if you try to scale this up, espe- uh, especially, uh, then it becomes more of a networking problem. But that, with FHE, it's really, you know, compute bound, it's, it's really just all about compute. Uh, so yeah, I mean the, the FHE hardware research has been going around for quite some time. Uh, even DARPA gave us some grants to Intel duality back in 2021. Uh, there are also quite a bit of overlap between ZK and FHE hardwares as well, so, uh, it's actually quite exciting to see a lot of these hardware actually very close to being production ready. So, you know, in the context of privacy for blockchain, this is not a new topic neither. There has been, uh, a lot attempts solving it using more of a commitment based approach, so you can think of maybe like a ZK-based approach. Uh, what we're using is what we call the encryption-based approach. And maybe just high level comparison of the two approaches, what are some trade-offs? I, I believe that, you know, both approaches are quite valuable for different use cases, uh, but maybe just from a high level, you know, in terms of commitment based approach, uh, the computer overhead is actually on the client side. So, you know, the end user generates a ZK proofs on the client side, so it sort of like spread out across every single user base, right? In the encryption-based approach, typically the blockchain does the state transition on behalf of every single user, so this also means that computer overhead is on the blockchain side. In terms of privacy, you could argue that the commitment approach is more private because every single user has their own encryption key. So encryption"
  }
]