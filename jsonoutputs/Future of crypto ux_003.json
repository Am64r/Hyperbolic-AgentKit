[
  {
    "speaker": "Andy",
    "content": "The flow goes bottom-up. Um, I think it makes a ton of sense as the client sends their raw transactions with the predicate SDK. They broadcast these, uh, tasks to the operators that, and essentially the tasks are the different checks that the operators are going to sign off on or not. And then ultimately a- and and so the the the these checks, you know, maybe we split those into two different buckets. We have the on-chain checks that, checking different on-chain balances, account balances, bridge routes, etc. etc., verified contracts potentially. The second bucket would be anythi- any da- any checks that aren't available to do from these archive nodes on-chain and and have to go into the off-chain world."
  },
  {
    "speaker": "Rob",
    "content": "Yep."
  },
  {
    "speaker": "Andy",
    "content": "Um, I I let's so, I wanna dive a bit deeper into this off-chain component, and how how this is how this off-chain data is brought, uh, into an environment where these operators were able to check it. Do do use oracles? Can anyone provide this information? Let, you know, what is the extensibility of some of these predicates that rely on some some data that's only available in some far-off, distant land?"
  },
  {
    "speaker": "Rob",
    "content": "Yep. That's a good question. So, in the case of off-chain calls, really what you're trying to do as an operator is really determine a yes or no for some requirement. And so maybe the simplest example here, uh, would be like a group like TRM. So TRM, as you might know, provides risk scores for a transaction data. A lot of front-end interfaces use TRM, but you might also use it for a back-end for your smart contract to say, \"Hey, we just really wanna avoid any address that's been, uh, a sanctioned entity, like a North Korean entity who's trying to facilitate terrorist financing."
  },
  {
    "speaker": "Rob",
    "content": "So all right. Great. So we know TRM has their data off-chain in a database. Uh, it's highly private data. They're never gonna make that public, right? That is their data mode. But what you need is, you just really need a mechanism to just say, \"Hey, there's this address. Does this address fall on your high-risk or severe list of addresses based off of, um, your your sanctions list."
  },
  {
    "speaker": "Rob",
    "content": "See, that's the decision you're trying to really make. Now the question as an operator is, how do you actually get that? So what we do here, in this case, and anyone could do it. But at the moment, we have our middleware. So the middleware here is something that's designed to broadcast a transactions to the operator. Anyone can s- anyone would be able to spin up their own middleware. Not yet, but that's basically where we get to. But at the moment, the labs entity for us has built a public good, which is the middleware. All it's doing, of course, is broadcasting transactions. But in the case you have an API call that needs to be made or an external information provider, the middleware holds the API key. So what we've done is, we have, let's say a partnership with TRM where TRM is provided an API key. So when the transaction is broadcasted to the operators, what's included in there is also an API key. So the operators can say, \"Okay, great, we can use this API key to go and make the call to TRM and say, all we're doing is sending this transaction, tell us yes or no. That's all we need to know. So TRM will s-, uh, return a thing saying, uh, yes, this transaction is not high-risk. You're good to go. They issue that back. The operator has that as part of their compute, and then they say, \"Okay, great. We've gotten a response from TRM. We're going to issue the signature."
  },
  {
    "speaker": "Rob",
    "content": "Now, the important part to note here, right, is, like, for anyone who is using off-chain data, you are, of course, trusting that off-chain data provider to be to be good, right? You're you're trusting that their data's clean. There- you're trusting that their data's accurate. You're trusting that it's up to date, and that the information provide- the external information provider here is actually going to be responsive. Let's say you set a rule that, uh, we have to have a TRM check. And for whatever reason, TRM goes down, you actually your transaction won't go through, because your operator is gonna be like, \"Hey, we need to we can't issue a signature until we tell- until we get TRM to tell us something. So there is a trust mechanism that is happening here when you use external information providers. That's an important thing to note here. But that's generally how the flow works. Now, of course, we could have different groups that spin up their own middlewares and might have different API keys and things for different, uh, external data."
  },
  {
    "speaker": "Andy",
    "content": "Got it. And I I I think this comes into play with the previous example o- o- on around intents as well, because a lot of intents, uh, excuse me, a lot of solvers have their inventory off-chain, maybe centralized exchanges and such, so um, got it. And so, the information providers, you know, are are accessed through API keys. Do you provide those API keys to the operators so that the operators can go and fetch that information?"
  },
  {
    "speaker": "Rob",
    "content": "That's right. So what happens is the middleware basically sends, uh, the API key to um, in this case it depends on how many operators are needed, uh, and how many API keys are provided. So with TRM, it's just one. But with some of them, they might say, \"Hey, look, we'll give you three, like, here's three API keys in case you doubt like any one of them. So it really just comes down to the information provider and, uh, whether they're like, \"Look, like, you're gonna get the same exact result with any of these. We're a large trusted entity. Trust us with one API key. That, of course, comes down to the application and how comfortable they are. But in some cases, you might want to do, you know, more than one. Um, that gets interesting, or let's say when you start thinking of like like, I think TRM's a different use case versus let's say you're doing off-chain collateral calls to say there's sufficient collateral to be able to mint a new asset. Then you might want to have more than one call for that, right? And so that's when you start having this complexity of how what type of API like how like how many API keys are sent. How many operators do you need to go and check to say, \"Yep, this is valid, this is good."
  },
  {
    "speaker": "Andy",
    "content": "Very cool. Yeah, I I see this potentially extending into the the one, there's probably more than one, but one of the use cases is that everyone sees on the horizon but has not been accomplished yet, which is under-collateralized loans, uh, on-chain. And if we have access to banking data or some some off-chain data source that is able to provide those checks in order to mint some some, uh, debt on-chain with some off-chain collateral, we could potentially we could potentially get there."
  },
  {
    "speaker": "Rob",
    "content": "Yeah. That's a really good point. That's actually one use case we have been looking at. Because when you, when we talk about prerequisites and the complexity of that, if you're doing off-chain, or if you're doing, you know, under-collateralized lending, there's a ton of information you have to work with. And it also depends market by market, what type of loan you're doing, uh, what is all the different data pieces, what are the regulations, requirements, all those things. So like if you're, like, one group that we've been look- like one example, I can kind of from like prior work experience, if you're trying to do like under-collateralized lending in let's say Kenya, uh, that requires, you know, pulling different off-chain information such as, like, credit history, things like that. But then also, like, phone data, because a lot of things also happen through M-Pesa. So you have to think about that type of information, potential payroll provider information. You're trying to pull all that stuff, and then there's probably gonna be some on-chain things you wanna pull as well. All of that is a lot of complex work that you're trying to aggregate together. And and I imagine that most crypto projects that are trying to say, \"We wanna do under-collateralized lending.\" Don't wanna have to spend the time building all of that. They want, they really should be focusing on loan origination. Like that's their business model. They make money by originating loans and earning some type of yield off of that. But if they spend most of their resources building the back-end system, they're basically blocked from going and doing all the other work that they really need to do. And that's again, like, how do you offload that complexity."
  },
  {
    "speaker": "Andy",
    "content": "Yeah. Would would love to see that built out. Um, cool. So, completing the flow here, um, the information providers provide that that info to the operators who enforce, uh, that policy by checking the data and returning a signature, um, and then ultimately they they, uh, uh, they make that signature and and, uh, uh, the user's transaction, uh, goes through after passing those checks. Um, cool. So, that is the workflow. I think that makes sense. And then I I have a couple more questions, um, mostly on on, like, EigenLayer specific."
  },
  {
    "speaker": "Rob",
    "content": "Yep."
  },
  {
    "speaker": "Andy",
    "content": "Um, now, you mentioned one one element, uh, of choosing specific operators for specific tasks. And I was genuinely curious 'cause I haven't seen, heard a lot of AVSs use this framework yet. Um, is this something that's available for anyone that's using EigenLayer? Um, and and if you don't mind, dive a little bit deeper into how this works. You- you know, how you're able to coordinate and and basically choose a particular set of operators for certain conditions. Is is that up to the user? Is that up to to you as the predicate as the AVS?"
  },
  {
    "speaker": "Rob",
    "content": "Yeah, if you could, if you don't mind explaining that a bit further."
  },
  {
    "speaker": "Rob",
    "content": "Yeah, so this is something we don't have up yet. Like this isn't live yet or possible through our system, but that is what we're getting to, is the ability to actually be able to select your specific operators. It's not that we would do it. Right now, the way we have it is, you know, we have a general operator network. We're thinking of actually starting with a proof of authority model, that then shifts to a proof of stake model to be able to do that. But then, of course, the idea is that we it's not that we shouldn't be determining this. Like as an application or as a, as a generalized kind of infrastructure provider, we shouldn't be making opinionated decisions on which operators, but an application might. And so for them, it's actually giving them the ability to to do that. This hasn't been built yet. But that is where we get to. Because we think there is a world and a need for those kinds of things as you start thinking about different types of integrations, different types of prerequisites. What types of assets might you want in there? Maybe some that are looking at a bit more of like institutional use cases might say, \"We want certain institutional operators as part of this. We want, or maybe they want specifically only their signatures. You're able to do those kinds of customization."
  },
  {
    "speaker": "Andy",
    "content": "Yeah. Yeah, I can imagine potentially deals wi- between applications and operators as well, like preferred operators for certain applications. Um, and then you mentioned the bridge. P-"
  },
  {
    "speaker": "Rob",
    "content": "Yep."
  }
]