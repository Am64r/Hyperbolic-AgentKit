[
  {
    "speaker": "Guest",
    "content": "Or you have like, very, well you would have like a lot of like, funds on, on the other one. Then, you do start caring more like, okay, where there is kind of like, the most liquidity, where do I actually have like, the least like, slippage on like, the swap they want to do? And then it makes sense to kind of like, pay the extra cost, to still have your funds on the other one, or, or like, partially on L2, or whatever you want to kind of like, do, and then pay this extra cost to, to have this. Uh, but for normal users that are like, very kind of, cost-sensitive, and you want to just swap like $100, or whatever. Uh, then, yeah, you do want to store your funds on the, on the L2 as well. And then you kind of like, have the benefit of like, if the liquidity on the L1 is still much higher than on the L2 that you're on, or like, another L2, then you can still kind of like, kind of like, combine all these transactions in one, do like a single swap on the, on the L1, and then get you, your funds back on L2 with like, the minimal slippage. So, it opens up like a, more like a design space of like, like, different options. And it's kind of like, up to you kind of like, what option do you want, also the kind of like, on the application level, like how can I scale my application? Uh, because, yeah, if you do still have your funds on L1, or the application, kind of like, state is stored on L1, you do end up paying like a higher cost, right? So, you will pay like, a very kind of, like, well, expensive like, asset store cost to actually store data there, or kind of like, move funds between the L2, on the L1 smart contracts. So, yeah, you, you would pay a cost. So it needs to be worthwhile to actually pay this cost. And it depends on yeah, whatever the users kind of like, priorities, and like, the apps' priorities."
  },
  {
    "speaker": "Rob",
    "content": "Got it."
  },
  {
    "speaker": "Rob",
    "content": "Cecilia, what, what else, yeah, go, please, go ahead."
  },
  {
    "speaker": "Cecilia",
    "content": "Oh, I was going to go for the next slide, but if you have any questions, you can like, answer."
  },
  {
    "speaker": "Rob",
    "content": "No, no, I, my question was like, if, if there was, if there was more slides, and like, what else, you know, are like, some observations and consequences of, of this design?"
  },
  {
    "speaker": "Cecilia",
    "content": "Oh, yeah. Right. Um, so this is like, more details of the design, where, if like, in, uh, a transaction is being initiated by L2, we should, we can still like, pack it up as like, one transaction, but, uh, in this case, like, we'll have like, one transaction follow the other transaction, but still like, encapsulate the L1 transactions that are in the middle. So, like, it's all about emulating L1 transaction, while, you're executing on L2, and then prove it later on. And then like, the L2 sequencer will, will see like, the paint transactions separately on layer 2. Um, yeah, so these are the details, I guess. Um, oh, yeah, I think this is very important. Like, if we evolve, um, how we did from L1 and L2 to like, cross-chain transaction, um, we can do the same thing from, like, for example, um, you know, chain A and chain B, right? Um, and, I think Brecht can go over this. It's like, more, like, I think like, there's like, details about, uh, on layer 2 only. They're different from L1 to L2. Um, yeah, Brecht."
  },
  {
    "speaker": "Guest",
    "content": "Um, yeah, well, I guess, kind of like, uh, I think, it's still pretty similar to the L1. Uh, but yeah, so kind of like, if you do, just like, uh, a transaction between the L2s, then, basically, you still have like, a single transaction, and you would just, directly call in the, in the other L2 as well. Um, but yeah, the difference here is maybe that, okay, there are kind of like, these sub-transactions that have to be, well, both validated by the prover, but also kind of like, to split up the state between those two L2s. You kind of like, have to have like, this sub-transaction that like, the blue roll-up actually has to execute, and then the pink stuff is actually being executed only by, by, the, the, the, the pink roll-up. Uh, so, yeah, it's kind of like, more of like a scalability kind of like, uh, um, kind of like, uh, implementation detail where yeah, for, for everybody, they, they only actually care about like, the one transaction also from, from the builders' perspective. But, we do still to have like, split them up just to make it possible to sync the specific notes, uh, separately. So there's like, no, uh, kind of like interdependency even for cross-chain, uh, transactions."
  },
  {
    "speaker": "Cecilia",
    "content": "Right. So for, and also at, from a block building standpoint, um, if a builder sees this like, pink layer 2 has a lot of traction, right? I can choose to sequence for, um, the pink layer 2. Well, in this case, um, it should, still have the access to the state of the blue layer 2. Is that true, Brecht?"
  },
  {
    "speaker": "Guest",
    "content": "For the builder? Yeah, yeah."
  },
  {
    "speaker": "Cecilia",
    "content": "Right. So, like, if you do want to maximize value capture from sequencing multiple layer 2, um, you will have to like, uh, obtain as much state access as possible. Um, and then I think like, the building, the block building algorithm, you know how people like, uh, build block differently, like our sync or like, uh, beaver build or Titan, they all have like, different tactics, and, and block building, right? And in this case, like, all these, all their tactics will be renewed, right? It will be very interesting how the block building space will evolve with this Mm-hmm. Yeah. situation."
  },
  {
    "speaker": "Rob",
    "content": "Yeah. In, in this model, are all of these base roll ups, the pink and the blue are both based."
  },
  {
    "speaker": "Cecilia",
    "content": "Yes."
  },
  {
    "speaker": "Rob",
    "content": "Okay. And so they use the same sequencer and which is the L1 validators. And so wouldn't the, uh, wouldn't the L1 validators have, wouldn't the sequencer have access to the entire state of the pink and the blue, or,"
  },
  {
    "speaker": "Guest",
    "content": "Not, not necessarily. So, they would see all the transactions being posted for these L2s, but they don't necessarily keep the actual like, L2 state derived from those transactions, uh, themselves. Uh, well, I guess, the L1 validator is like, probably not doing anything in any case, but yeah, it's kind of like, whoever kind of like, gets the right to actually build the block for the L1 validator, yeah, we'd have to get the yeah, sync the state."
  },
  {
    "speaker": "Rob",
    "content": "They, they would have to get the state for both of these roll-ups."
  },
  {
    "speaker": "Guest",
    "content": "Yeah, yeah, yeah. So, so, yeah, for on-chain, so what the L1 actually only sees, most of the time, especially for like, the L1 case, it's only like, uh, like, data, right? So, they only see like, data. And so, to be able to get the state that you actually need to execute transactions for another L2, you actually have to take that data and like, execute it on your L2 node. Um, so and that's kind of like, a lot of work, because now, especially with like, data blocks, yeah, the, the, lot of data, you can like, put a lot of data there, the, the L1 validator don't have to actually do a lot of stuff with it, uh, just have to propagate the data. They don't have to actually like, uh, compute stuff. Uh, and so that's the difference. So, if you actually want to sync an L2 node, you actually have to take that data and actually execute on top of that."
  },
  {
    "speaker": "Cecilia",
    "content": "So, there's a difference in like, sinking the L2 node, uh, uh, in between like, sinking the L2 node and just like, validating all of the, the blocks, right? Like, for, for L1, it's still the same. Like, the L1 validator still only sees this block, which has been proposed through the regular PBS, right? It's just like, the stuff that the pink and blue transaction here, it, it will just like, it will just show appear as, like a regular roll-up transaction, right? And then, a pink builder, or like, a blue builder or blue or a pink node that are specific to the chain will actually see this pink and blue block and execute these blocks locally, right? So, like, for L1, the pink part and the blue parts are agnostic. Um-hmm. Um, so it doesn't add any execution overhead for L1 validator or, or a builder that only want to build for the L1. Right, you can basically just ignore the other things. It's just, it's totally optional for like, these like, pink or blue builders to like, to, to build the whole thing. And it's also very like, um, optional for like, a, a pink builder that want to exclude the blue, blue transaction, then like, the pink builder will, will just only build like, this single transaction over here, right? Because this, this bundle also contains the blue, which means you also require the blue state. Um, yeah, so it's totally open and Right. Right. and, you know, competitive in that case. And that's Yeah. Yeah. Right. Because these builders are opting in to the, the blue, or the pink, or the blue and the pink. Yeah. Right. Yes. Okay. And so, I guess to finish off like, this podcast, which has been absolutely phenomenal, I want to ask a really, really dumb question, which I think I know the answer, but maybe it'll help just to like, kind of like, revisit the basics. Can you guys like, what is the difference between a builder and a sequencer?"
  },
  {
    "speaker": "Andy",
    "content": "Welcome aboard on our journey into the singularity. This is the endgame road map for Frax and Fraxl. The new L2 out of the Frax ecosystem that is totally based on fractal scaling. Fraxl, the modular L2 blockchain, built by Frax with modular and fractal scaling in mind. Fractal scaling is based on the Mandelbrot set of fractal images, and it explains how L2s become L3s, and the entire app chain life cycle goes through its evolution. The Frax ecosystem is made of some of the top builders in the space and has stemmed from its OG days of the Frax stablecoin. It is now in the LST space, the LRT space, and this Fraxl L2 joins the existing suite of Frax products, including Frax Swap and Frax Lend. You can see Frax, Ferry, the bridge to go from any chain: Arbitrum, Optimism, or mainnet into the Fraxl mainnet, bridge your tokens, and bring your Frax assets into the"
  }
]