[
  {
    "speaker": "Rob",
    "content": "Take a small amount to pay for all the costs and then if you want you can uh uh keep the funds inside this this account or withdraw them. So depending on the amount of proofs you want to send and everything you can keep your balance there or or just withdraw it. And then of course from these uh fees and everything we we cover the expenses for uh the things we have to pay in Ethereum that is the um uh batch creation and the signature verification. And then of course we we get a little surplus to also pay for the economic security and everything that that we need to to secure the network and and the rewards for the um um validators. So that’s the the basic idea. It’s like uh um I think like pretty simple and intuitive which is something uh uh good and so users can understand the full flow and what and what’s uh going on there. Um and to give you like an example of of something you can build using this um uh uh simple architecture and everything is uh a bridge. And in particular, I am going to focus on the Mina to Ethereum bridge. Which is something that uh uh if you want to do it uh uh right now in Ethereum, it’s pretty complicated. Why? Because Mina uses one proof system that is not uh cheap to verify in in Ethereum. And then what you have to do is do proof recursion in order to to be able to verify it in Ethereum. And that proof recursion is really costly. It takes a lot of time. Uh we try like some alternatives using for example CKBMs but it takes a lot of time, you have to improve the code uh to make it friendlier for the VM at pre-compiles, try to do things. And even if you could like finish all this wrapping and everything, uh the problem that you have is that the bridge is not just verifying the proof because you can get a valid Mina state proof, but then you also have to check the consensus which depends on on on CK proofs in the case of Mina. And then you have to also show your account. Show that your account is included in that state. Um so this can be like pretty complicated and if you want to do it in in Ethereum it’s also expensive. So what we found found out is that um instead what we can build is a specialized um verifier that uh checks the state proof and the consensus simultaneously. Okay? And the proof is valid if and only if the proof is valid and the consensus is valid. That happens because in Mina for example what you could get is a valid proof from a previous state uh uh and then you will try to update to a previous state and that is problematic. The proof would be valid but the problem is it wouldn’t check uh it wouldn’t pass the consensus checks. And then to to show uh account inclusion what we can do then is also have a specialized uh verifier to show account inclusion instead of doing uh a CK proof or or something since the the account inclusion is pretty simple then you can have like a direct verification of that. So with all these you don’t have additional proving, no latency, uh it it’s it gets really simplified and the cost of of the bridge is way way lower than you would get if you had proof recursion and everything with Ethereum. So I think this is a very nice application that highlights the power of what you can have when you use AVSs or EigenLayer to build some specialized AVSs that uh uh remove some of the constraints you have with the EVM. Um and this is something that um I particularly I’m very excited because I was working at some point or helping like analyze some of the things of this proof system and all that and it was like really complicated and um seeing that this can be done in a more efficient way without having to do crazy things to a proof system that is pretty efficient for their blockchain is is really nice and I think it will help connect uh uh two very interesting communities as are the Ethereum community and the Mina community. And so a little bit about the future then is that uh with EigenLayer we will be able to build different systems that then we can combine as Lego bricks to build new decentralized applications. CK is what we need to solve the scalability uh issues that we face in blockchains. And also they are useful for these decentralized apps because at some point you will have to uh re-execute or do something and CK is a way of reducing the amount of re-execution you have to do. And so with lower costs and easy to write applications, we can expect that developers will find ways to use these technologies to build new interesting products. I think it’s going to be great, we can imagine also CK solving problems outside blockchains. Uh for example, helping fight misinformation or control AI or making sure that uh the answers you get from AI are from the model you want to use. And so we already know that there are like some very nice um use cases of um CK in in blockchain and even outside blockchain. But I think that I am a bit more excited about the kind of of of things I I still don’t know that are going to happen. I know that we are building all the necessary infrastructure to make new decentralized applications. And I know that a lot of younger and more talented people will find ways of uh taking advantage of this reduction in costs and development to build the future. Thanks. If you have any questions or anything. I think I asked all my questions uh throughout the presentation. That was phenomenal, thank you very much. Um I I’m equally excited about uh the future of ZK and uh all of the all of the possibilities that are still unseen. I think there’s there’s lots of lots of very smart people working very hard and putting lots of energy into into this space and so uh we continue to see innovations in ZK on the proving side and on the verification side. And honestly I’m I’m very excited uh for uh uh the ZK transition to take place. I think it’s already happening from optimistic to ZK and I think it will continue to happen. Um so very very excited for uh scaling blockchains with with ZK. Thank you for being a big part of it. Thanks a lot. Always a pleasure talking with you. I really enjoyed it. <noise> P"
  }
]