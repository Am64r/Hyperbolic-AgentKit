[
  {
    "speaker": "Rob",
    "content": "You know, you are able to do, to do conditional validation logic, uh, logic validation over encrypted data, and then complete this, you know, computational ERC-20. 20, first transfer."
  },
  {
    "speaker": "Andy",
    "content": "So Remi, quick, quick question here just like, as, as we're putting together the pieces. You, you know, in the long run, you, you'd like to do fully verifiable FHE encryption, by verifying that encryption with a ZK proof. But because ZK is still kind of far off, you guys are val, validating, and or verifying the FHE computations using consensus, and, and crypto-economic security."
  },
  {
    "speaker": "Guest",
    "content": "Yes, and a slight nuance. So, so we are using ZK, for all the inputs. So, to prove that the ciphertext is correct, but we're not using ZK for the compute because that's too inefficient. So, we're using consensus for the compute today. Yeah, long term, we would like to move towards more of a ZK-based, uh, ver, ver, verification. Yeah."
  },
  {
    "speaker": "Andy",
    "content": "Okay, and then you, so the, from what I'm gathering, the core innovation here is that you guys have designed a way to, to use consensus for, uh, uh, the, the computation of FHE. And the FHE is encrypted, so, like the validators don't know what exactly is being computed upon this, this ciphertext. But they don't really need to know. They can still validate and verify the correctness of the FHE computation without actually knowing."
  },
  {
    "speaker": "Guest",
    "content": "Exactly. Exactly. It's deterministic, right? So when Bob sends money to Alice, although the values and the amounts are encrypted, the, the new ciphertext, right, is gonna look the same across all the validators."
  },
  {
    "speaker": "Guest",
    "content": "And this is actually kind of nice because if you think, if you think about, if we were to zoom out, right? Like why, are the blockchains transparent, right? They, they're transparent because you need to be able to verify that all the transactions are done correctly, right? You need this transparency. And this is sort of like pre-FHE, right? Uh, but FHE also has this property where you can verify that all the compute has been done correctly, and now you can suddenly have encryption on top of blockchains, that's also verifiable, right? So, it's almost like a perfect match for blockchain technology because of this as, aspect that you can verify it's deterministic. Uh, so this is what we're building. The, the innovation that we're building here is a blockchain layer, that sits on top of existing blockchains, and augments them to have the ability to have private computes."
  },
  {
    "speaker": "Rob",
    "content": "So, you know, and, I like this example because it's, uh, it's also a stark contrast compared to something like Tornado Cash, right? The, the difference here is, when I do an ERC-20 transfer, uh, confidential ERC-20 transfer, the flow of funds is actually traceable. So, if I look on Etherscan, I can see that Andy has transferred Robbie some money, but just the amount is encrypted. Uh, versus you know, Tornado Cash you're hiding the sender, recipient, you're breaking the link, linkage. So, here's a very different property here because everything happens on-chain with FHE, you do have this traceability aspect. But like I mentioned earlier, depending on your use case, right? If you're visiting a medical facility, you're actually, this is actually probably not, not the right tool. Uh, if you wanna do some anonymous donation, you know, you're probably better off using ZK. Uh, but if you're trying to do something like payroll or supply chain where the parties are known, you just wanna hide the amounts, then this is fine. Uh, this experience is very similar to Venmo, uh, folks, who live in the US, you know, Venmo, with Venmo you can see your friends sending money to each other, just not the amounts. Uh, for folks in Europe, you know, will be something like Revolut, right? Um, so, so we are effectively able to replicate that experience, uh, I would say, in Web3, and that's sort of been a missing, uh, missing experience. And like I said, like a lot of these things, it's not even really about, you know, uh, it's just a practicality of at least having some confidentiality. Because the reality is, yeah, if I transfer you money even $5 on-chain, immediately, you know, my net worth, all the things I've bought in the past, uh, all the people I interacted with, right? It's, it's quite also dangerous. Like what if a bad actor, you know, gets to know you, right? Uh, your neighbor for example, could be a bad actor, right? They you're also putting yourself at risk. So, moving a billion people on-chain in my opinion today, is, uh, will actually create a lot of social chaos. It's very difficult to make this practical. Uh, I would say like what we're building here, if you think about like the early internet, uh, nothing was encrypted. You had this you know, HTTP essentially. So, you could only do academic research, uh, things of that nature. You really needed HTTPS, so, you know, SSL, TLS, to, start encrypting credit cards, payments, and bring in businesses to the internet, right? And so, in a way, like, we see Inco as this infra, that essentially enables, uh, encryption to blockchains, uh, but here it goes beyond payment right? Because it's reintroducing this concept of private state to the blockcha, uh, blockchain, the blockchain world basically. Um, so you know, yeah, uh, like I guess, like beyond payment, right? Like, even Poker. It's crazy to think that we still don't have fully on-chain poker games in crypto. And the reason why is you just can't hide data. It's a bluffing game. This game would just not make sense without the ability to hide data. And so this is where you know, we are able to generate, uh, hidden integers that are quite useful for, for game, games, and, and, and such."
  },
  {
    "speaker": "Guest",
    "content": "Uh, we built this fun game, uh, about a year ago during ETHGlobal, uh, it's a fully on-chain Mafia game, uh, so also known as, uh, Werewolf. Basically, uh, you know, four or five players will play together, and you know, they'll be a doctor, a police, uh, a secret killer and some villagers, right? And, and so, you know, this game is easily done, uh, using our tech, because everything happens on-chain. It's a, it's a multiplayer game. It's a multi-player system. Uh, it's very, very difficult to build the same game, using ZK because everything will happen off-chain and you need to do coordination. Uh, we talked to various teams who have tried to build this using ZK, and they just end up, you know, not being able to finish the game, or just end up wasting a lot of time just, you know, working around the, the challenges and complexities. Uh, this game, was done within 24 hours, uh, because everything happens on-chain, it's a coordination game, multiplayer game, it's just uh, a lot easier basically."
  },
  {
    "speaker": "Guest",
    "content": "Uh, one benefits that's interesting with, I'll say encrypted, uh, compute is you have MEV protection, by default, right? Because if you're hiding the amount you wanna swap out, for example, you're sort of masking your intent. So bots can be sandwich attack you, right? Or they could take a risk and try to sandwich attack you, but you know, um, just an interesting property here."
  },
  {
    "speaker": "Guest",
    "content": "And then for something like private voting, uh, again it, it is a multiplayer, uh, kind of like use case. So having this shared layer where everyone can cast their votes is quite convenient. And so, I'll say one thing that people need to understand when building using FHE, is to how to, design around, um, uh, conditional. So, there is no if else statements in FHE, because if else statements that you have in regular code, does leak information about the underlying value, right? So, depending on the branch that you execute, you actually reveal what the underlying information is. So, there is a clever way to do this over FHE, uh, using a multiplexer. Uh, so quickly I can walk over a, example. So, imagine we're building private voting, the encrypted choice can be zero, or one. And so the first thing you do is you can compare if this encrypted value one, uh, sorry, if the encrypted choice is equal to one. And what you get is an encrypted Boolean. And so what this really means is when you pass in this encrypted Boolean into this, uh, Cmux, which is a conditional multiplexer function, it will return the encrypted vote count if the encrypted value is true, but zero if it's false. So, it's, it is a conditional over encrypted data. Uh, kind of like a ternary in Javascript. And then you do the same thing for against, where you return zero if the encrypted value is true, and then the vote count if it's false. So, one of these values would actually be the encrypted vote count, the other one would be zero, right? You just doing the reverse. And so, you add both of these encrypted values to their respective tallies. And so, again, from the outside perspective, because everything is encrypted, you can't really tell you know, if the, the user voted for, um, in favor, or against, because you just end up doing tallies, uh, over encrypted data basically. Um, I would say that's probably the slight nuance that most people have to learn when building using FHE here."
  },
  {
    "speaker": "Guest",
    "content": "Um, yeah. So, we are compatible with existing Ethereum tooling. Uh, we've hosted quite a bit of hackathons already and, you know, one of the bigger feedback, or positive feedback is that, people can start building very quickly."
  },
  {
    "speaker": "Guest",
    "content": "And, we are supporting a pretty wide array of operations and, you know, comparisons. Uh, so, it's really, you know, I would say, a greenfield opportunity for people to build novel use cases, that wouldn't be possible otherwise. And, uh, yeah, it's really just about, uh, identifying new problems to solve, unleashing your creativity. And, uh, you know, at Inco we are very passionate and excited about, you know, novel use cases, so definitely come talk to us if you have any ideas, we're happy to you know, help you refine your ideas, provide feedback. And, uh, yeah, some of our docs, uh, you can check out our docs. We are, uh, making some significant, uh, up, updates pretty soon, so the docs might change. Uh, there are some, you know, mini games they can play around uh, with arcade.inco.org. Uh, definitely reach us out at, you know, on, on Telegram, but also uh, email, and, uh, we're pretty active on Discord as well. Uh, so definitely, you know, uh, don't be shy, and you know, come talk to us. And, uh, yeah, this, uh, sort of concludes the, the…"
  }
]