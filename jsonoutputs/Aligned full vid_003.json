[
  {
    "speaker": "Rob",
    "content": "Build a new community, get operators. And the problem we we have is that in the end what we are trying to build is something that a new, like like a new Ethereum. And something that is going to compete to to with with Ethereum. So..."
  },
  {
    "speaker": "Andy",
    "content": "What, what do you mean by direct verifications of proofs or or native proof verification?"
  },
  {
    "speaker": "Rob",
    "content": "The idea then is that we are going to run the verification using for example, the Rust code directly on the CPU. We are, we are not running it on top of a virtual machine like you have, uh, in in Ethereum, okay? So, there is no like, emulation or or anything, it’s just the code running on on on the CPU. So, of course then you get like several advantages compared to running them on top of a virtual machine, and you can start leveraging for example, parallelization, or some optimizations. So, that’s the, the whole idea. So, what we can do then is, um, try to get the best of both worlds, and that is where EigenLayer, uh, comes in, okay? So, one of the main advantages that um, we have with EigenLayer is that it allows us to bootstrap the security of an an application thanks to re-staking. And what it brings us, is the possibility to get programmability on top of the EVM without being constrained by it, and competing for block space. Okay? So, uh, we know that the EVM is..."
  },
  {
    "speaker": "Andy",
    "content": "Okay, so, this is where EigenLayer comes in. EigenLayer allows us to bootstrap the security of our application thanks to re-staking, so we don’t have to build everything from from scratch. And what it gives us basically is to have programmability on top of the EVM without being constrained to it, or having to compete for, um, block space. Okay? So, the good thing is that then, uh, we can combine the best of both worlds to build a decentralized, um, integrity layer, or verification layer on top of Ethereum. Okay? So, what we can do then is have our network of, uh, validators, or verifiers, which is secured by re-staking. What the validators do is, they receive the proofs, they run them on top of their CPUs, not on top of the EVM, okay? And then, they reach consensus, and they post those results to Ethereum, Ethereum then verifies, um, their signatures and everything saying that the results are valid, and then Ethereum can update the state of those proofs. So, what we can then get is, for example, a cost, um, reduction by having like, uh, efficient batching techniques. So what we can do is, for example, uh, create a task where we say, verify these 1,000 proofs. And what they do is they verify the 1,000, if all all are correct and the majority of the validators say this is okay, then, they all sign the message saying this batch is okay, they post it to Ethereum, and Ethereum says, okay, these signatures are valid, and everything. So, I have to update this. And and so, you can reduce here the cost by by a lot, uh, because you can in principle, bundle as many proofs as as you like. And another advantage is that you can easily incorporate any proof system. The only thing you need is, of course to have the verification code written in some language, for example in Rust, and then you just receive the proofs, the public input, and then you run the verification algorithm. It’s going to say true or false, and based on that, uh, you reach agreement with the rest and everything. So, it’s it’s pretty efficient, and the good thing is, we are not building a new network from scratch, and having its own like consensus algorithm. It’s, here it’s very simple. It’s just operators checking and signing messages, and then having like an an aggregator that just gets all the the signatures and produces the aggregate signature. So, we are then not competing with Ethereum, but we are getting all the advantages of doing things like in a separate, uh, network."
  },
  {
    "speaker": "Andy",
    "content": "So, couple, couple questions, um, on the, yeah, so, um, first one here is, is on the, uh, the recursion or the aggregation of of these proofs. Um, you know, you mentioned before maybe 30 or 50 proofs, uh, at which point, you know, you, you have an increase in latency? Um, is there any increase in latency by by aggregating the proofs this way?"
  },
  {
    "speaker": "Rob",
    "content": "You practically don’t have latency. You just, um, wait until you get maybe several proofs, but once you get the batch, it goes directly to the, um, validators, they just have to run this verification. Remember, verifying each proof is, uh, very fast, you can also use parallelization. And then, what they do is just they sign a message saying, uh, this batch is correct, okay? And then it gets sent to an aggregator, the aggregator then checks that it reaches like quorum, that at least the majority said, okay, this is correct. And then the the only thing it does is, it generates this aggregated proof, posts it posts it to Ethereum. So, it’s really fast, maybe in a few blocks, uh, you know, it it, it doesn’t need even a block, but for example in, in our case maybe you wait two or three blocks to give like some time. Uh..."
  },
  {
    "speaker": "Andy",
    "content": "Why is, why is this one much higher scale than the other proof systems that are only, you know, the, oh, can only verify 30, 50?"
  },
  {
    "speaker": "Rob",
    "content": "Because here you are like not doing any complicated operation. You are just having, uh, computers re-execute the verification in, on top on top of the CPU and get like true or false. In the other case, what you have to do is generate a proof of a verification, which is way costlier than just running the verification. Proving adds like a lot of overhead on top of running a program. So here you just do it in few milliseconds, you can verify many proofs, and in fact here we’ve tried it and you can maybe verify thousands of proofs per second, uh, with not so much effort."
  },
  {
    "speaker": "Andy",
    "content": "And that’s because, um, with EigenLayer, you can utilize, you can, uh, reuse the consensus mechanism of Ethereum, and you don’t need to build your own consensus mechanism. That’s how..."
  },
  {
    "speaker": "Rob",
    "content": "Yeah, there is like no, no consensus here, or, the only thing is each operator says, signs a message with with with the root of the batch saying this batch is okay. If, at least two thirds agree on that, then it’s more than enough to generate the aggregated signature and then we post that to to Ethereum. Ethereum then gets this signature and says, okay, this BLS signature, is it valid or not? And if it’s valid then it knows that the batch is valid and can update the state of the batch to verified. So, that’s the the main advantage. You don’t have like any overhead, it’s like uh, running the verification with like fewer nodes. Got it. Okay, and then um, you know, you mentioned that you’re uh, you’re not constrained to the EVM, which makes sense. Uh, and then, you also mentioned not being constrained or competing with block space, but you do have to post the result of the proof onto Ethereum. So, so how do you reconcile like, not competing for block space, but posting the result to Ethereum?"
  },
  {
    "speaker": "Rob",
    "content": "No, but the the amount of um, of gas that we we spend is not that high, and, for the time being, we we send one batch every few blocks. Okay? Because there is no no no, not a very high, like demand, of course, as it grows we can easily accommodate and send batches like more and more often. Uh, but that is like, just sending maybe one grow 16 proof or something a little bit larger. So in the end, I think that compared to sending these, uh, millions or thousands of proofs together, you are just sending one. So, you are like compressing a lot. Uh yeah. So, that’s the main advantage. Of course, in our case we have at some point to use like some block space, but the the amount we have to use is negligible or very small compared to the one we would have to use if we wanted to do this on top of Ethereum directly."
  }
]