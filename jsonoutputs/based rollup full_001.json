[
  {
    "speaker": "Guest 1",
    "content": "I just think that we're on the same page there and um I just wanted to kind of further reinforce uh the way that you guys are thinking about this. Um but I'm excited to get school and technical. So let's do it."
  },
  {
    "speaker": "Guest 2",
    "content": "Yeah, that's good."
  },
  {
    "speaker": "Guest 2",
    "content": "Okay, Brett."
  },
  {
    "speaker": "Guest 3",
    "content": "Right. So yeah, I guess well, I guess in the end, the only thing that really matters is the UX or like whatever users see, but really go into the technicals because that's what you, what we like actually do. Uh so okay, let's let's start from like the the current, like well, well I guess it's still the current kind of like state of things. Uh so you got like uh single like isolated rollups and they have like their own kind of like way to kind of like deposit and withdraw and basically they're like just like yeah, well fragmented isolated kind of like islands. Everything that is happening on this L2, only happening on this L2. You can't directly interact with L1. You cannot directly interact with any other L2s. Uh so that's not a great experience, especially if you have like hundreds of these. Uh so not good enough. Let's go to the next step where we actually introduce like multiple L2s."
  },
  {
    "speaker": "Guest 3",
    "content": "Uh so yeah, so this is kind of like the same thing, but like yeah, with multiple L2s here. So, all each L2 has like their own bridge. And if you they they all have like their own bridge then moving funds from like one rollup to the other has to go through this uh one br- this bridge that is on L1 which is well, well very expensive to begin with, and also not a great user experience, because yeah, people have to wait until kind of like the, the L2 kind of like finalizes, which could be like a couple of hours until uh up to like uh a week for like optimistic rollups. So, this is not great. And there are solutions to kind of like get around this problem, but then they kind of like depend on like liquidity providers, which is not capital efficient, and also introduce like extra fees and and things like that. So, um, not yeah, well, still the status quo, but not uh not a great solution."
  },
  {
    "speaker": "Guest 3",
    "content": "So, how do we improve on this? It's kind of like this kind of like shared bridge kind of like um design uh which I guess is kind of like now the accepted kind of like solution to, well, how do we actually do this? So instead of having each rollup have its own bridge uh on the L1, you have like a shared bridge on the L1 which contains all the deposits for all the L2s um kind of like combined. So that means that you don't have to go through the L1 again uh to you ha- don't have to go through the L1 to kind of like move funds from one L2 to the other, you can just do some kind of like proof that you kind of like burn some some kind of like funds on rollup A, and then you can mint them on the rollup B. You don't have to touch uh the L1 at all. You just have to be able to prove that something happened on the other L2, and that's basically it. So, this is a pretty good solution, um, it's kind of like, uh, well it's cheap because you do- only have to touch the two rollups that you are actually like actually interested in. Um, but it's still not ideal because it does have to happen like asynchronously. So, you do have to have like two separate kind of like transactions, one to kind of like burn it, then one to kind of like mint it on the other rollup and like, yeah, the the time frame to actually be able to mint the, the tokens on the other rollup depends on the finalization time of the source rollup. Uh, so if it's again, it's kind of like uh an optimistic rollup, then you can burn something on on rollup A, but you will only be able to actually mint it again on the other rollup when the state has finalized on rollup A, which is kind of like a week. So this will be like a very very slow wai- uh slow method to do it. But for like ZK rollups, this will be like kind of like acceptable, depending on like how uh like, yeah, how often the state is kind of like finalized. Uh, but still it's asynchronous, people kind of like have to do these transactions in like multiple parts. Um, the- there might be like a relayer that helps doing like the opposite transaction, but it's still kind of like pretty pretty messy and not uh not a great user experience. Also, the, the, it's kind of like not standardized kind of like how this works. So, depending on like what bridge or like what two rollups you're on, uh, the user experience might be like uh, pretty pretty different."
  },
  {
    "speaker": "Andy",
    "content": "Yeah, this is like, reminds me, uh, not, not the synchronous necessarily, but but the previous slide, reminds me like Superchain and Agle air and those types of designs, or at least like a similar thought process there.  Um, but I think like the big breakthrough that we're, that we're going to talk about here is kind of like the synchrony, the synchronous nature of base rollups um a- as kind of like a big shelling point for the vital, for the viability of them in the long term. So, uh, I, I'm kind of thinking about this as like there's like rollup clusters that we have right now. Like, you've got like the Superchain, like ZK Stack and like, Tycho has like it's, Gwyneth and Tycho and perhaps other chains in the future you could like arbitrum. Now, these may fall into some of this asynchronous communication between these separate kind of like clusters, but I'm viewing this as like within the clusters it's going to be synchronous, whether via coordinated block building or like base rollups or something like that. So, yeah, kind of, kind of been slowly putting together a thesis on this, but definitely curious to see, curious to understand what you guys think about that as well."
  },
  {
    "speaker": "Guest 3",
    "content": "Um, I think-"
  },
  {
    "speaker": "Guest 1",
    "content": "You want to say something, Cecilia?"
  },
  {
    "speaker": "Guest 2",
    "content": "Yeah, I was gonna head that like, maybe we should like skip these slides faster so that we could get to like the, the nitty gritties of synchronous block building. I think that, that would be the best Yeah."
  },
  {
    "speaker": "Andy",
    "content": "Fuck, yeah. Let's go."
  },
  {
    "speaker": "Guest 2",
    "content": "Yeah. We see where you're going."
  },
  {
    "speaker": "Guest 3",
    "content": "We're almost there. We're almost there."
  },
  {
    "speaker": "Guest 3",
    "content": "The ne- the next slide introduces the synchronous uh building aspect, well, the synchronous aspect, so like how do you actually see kind of like the synchronous composability working. Uh so then, okay, we we are there. We have like the, we still have like bridges in this complex scheme, uh, but the, the bridges would basically be able to directly call each other to do the, the burning and minting, and so, instead of having, well, having the relying on like verifying Merkle proofs or kind of like any kind of like sync-, uh, asynchronous approving process, we would just be able to to proof all the L2s at the same time as they kind of like commit um, uh, as, as transaction are actually executed. Uh so you don't have to have like any specific like smart contract, kind of like specific functionality, you would simply be able to call in the other smart contract and kind of like, because the block would be proven together, you can the-, indirectly kind of like proof all the interactions uh between them as well. Um, so that's a good thing, but the one kind of like downside of this is well, if you actually want this to be like scalable, and then, if there's like lots of like these layer 2s around, then to be able to verify that these transactions were actually executed correctly, you basically have to run a full node to, to be able to check that. Uh and so, yeah, you can have like clusters or whatever you kind like uh, kind like want to introduce, but ideally, you would be able to just think one L2, and be able to make sure that this, this one L2 that you are thinking actually the correct state that you get from the L1. Uh and so, the easiest way and the most scalable way to do this is obviously validity proofs. And so, what we will be doing is to directly have the validity proof uh, uh, available when the block is being proposed and also the block that is being proposed is already like, uh, split up, split up between the L2s, so that you only need to, so you only need to think for like, yeah, you only need to actually execute the transactions that you are like interested in. So if you only want to sync with uh, like rollup A, then all the on chain data will provide you exactly with the data that's necessary to just think rollup A, even if there's like cross chain transactions going on. And so, the data that's provided there, you can actually trust it because it will be, uh, validated with the, with the, with the validity proofs. Uh so that's kind of like the, the, the easy way to do it. And also like the most scalable, uh, scalable way to do it, but it does require on this real time proofs, or like close to real time proofs. Uh, uh, and so, that's kind of like where, some of the, well, some of the challenges I guess uh, come, come in, where currently, the things that are available to do real time proving is kind of like these TEEs, as you at, whatever. Uh, and also kind of like AVS solutions where you simply have like a lot of people running notes, and then uh create like a signature that this state is actually correct. Uh, but yeah, we are like a ZK rollup so, ideally obviously we believe that the ZK proofs are like the best proofs to actually verify these, these things. Uh, but for now, they actually cannot be used yet to, to generate these fast proofs, well, to, to generate these proofs like fast enough. Um, so that's kind of like the thing that, currently is not available, but that, we see as being available like, pretty soon. There's like, multiple people making some efforts there like, when this will be available, but let's say like roughly a year from now, it will probably be possible to also actually generate ZK proofs uh, fast enough to also yeah, generate like real time proving or like, close to real time proving."
  },
  {
    "speaker": "Guest 2",
    "content": "Oh, Brett, I'll go over the proofer later. Let's go to the next slide for now."
  },
  {
    "speaker": "Guest 3",
    "content": "Okay."
  },
  {
    "speaker": "Guest 3",
    "content": "Okay. So, we have the synchronous composability now. We have like uh shared liquidity, like a bridge. Uh so you don't have to touch the L1 if you don't have to. Um, so, pretty good solution. Still not like ideal because if you kind of like want to increase scalability, then you have to deploy like multiple L2s. And these multiple L2s would basically be like, yeah, basically like like clean slates. You don't have any, any existing state. If you want to do something on it, then you have to re-deploy like smart contracts and all this kind of like stuff. Uh so that's kind of like where the, kind of like the booster rollup functionality will coming, where, you don't always have to like start from scratch if you actually deploy like a new rollup. You basically inherit all the state from the L1 and users can directly use that new rollup to do all this kind of like functionality. Uh, and so you don't have to, yeah, re-create like ecosystems all the time. Um, so that's wha- that's the-"
  },
  {
    "speaker": "Andy",
    "content": "Yeah. Building on that, no, um, what's the latest on the booster? Like is there, is Gwyneth a, or Gwyneth a booster rollup from like, Tycho itself? Like or i- is, is that what you guys are calling a boo- a base booster rollup?"
  }
]