[
  {
    "speaker": "Rob",
    "content": "So, that's the the main advantage. And remember that, uh, uh, we can make batches as large as we like. So, we we've tried making like very big batches. And it works. Um, you can do maybe 4,000 proofs per second. At least, that's what we tried on on testnet."
  },
  {
    "speaker": "Andy",
    "content": "Cool."
  },
  {
    "speaker": "Rob",
    "content": "So, it's it's it's really cool. And of course, EigenLayer then lets you build other services, which you can then compose to build, um, decentralized applications. And since one of the core primitives to to have, um, decentralized applications is, uh, ZKP. Okay? Because it allows you to compress, uh, computations and move them off-chain and then check them on-chain. Uh, we think that this will be one of the most important blocks for, for many applications. Of course, then, there are, will be others that will be as, or more important than this, but this is going to be one, I think core building block having these, um, decentralized verification layers. So, some of the things we we can get is, of course, then provide, for example, fast finality, for rollups and app chains. Or even like, some kind of pre-confirmation. It also works to build, like, very fast bridges, develop new settlement layers, make L1s interoperable with Ethereum, uh, of course, then, you can also have verifiable machine learning, on-chain gaming. Okay? And another important thing is that you can easily support multi-proving. Okay? So, right now, most of the rollups, what they do is, they have their, their proof system, they generate the proof with that proof system, send it to Ethereum, Ethereum verifies it, and then they update. The only problem that you have with that, uh, is that, for example, if your proof system has some bug uh, or, or some vulnerability, then what may happen is, somebody may take advantage and completely break your security. Now, if you are using two different proof systems and in order for the transaction to be valid, it requires that both um, proofs are valid. Okay? And then, and they depend on different, uh, assumptions and, and techniques. Then it is much harder to break, um, the security of your system. Okay? Because then you have to produce two different valid proofs using two different proof systems and that may be, uh, very time-consuming or even you could use something like TEEs, for example, to, to provide like, uh, an alternative. And the good thing here is, you can verify them very cheaply and, and very fast. And you can easily add the, the proof systems to, to the verification layer, as opposed to the case of Ethereum, where you have to use one of these not-so-expensive proof systems like Groth16 or, or Plonk with KZG or something like that."
  },
  {
    "speaker": "Rob",
    "content": "Okay? And so, what we think then is that, we could be in the broadband moment for, for ZK. So, as we said, proving costs, uh, have been going down. It's easier to write verifiable applications. And so, what you can build then is decentralized apps in, uh, much easier way, with increased security. And so, if then you remove the, what the, the main barrier you have to use these applications because you want these applications to be run on-chain, uh, then you have to tackle verification costs. If this is like, really low, then the cost of adding ZK to any application becomes negligible. Uh, and so, um, what we can then do is, um, start building new kinds of applications. People will find ways to use this technology that offers us increased security, uh, and it's, it's really nice because it's, it's like many other things that we had before, that maybe we didn't find like, um, a, a good use case or something, but suddenly when it becomes, like, very expensive and easy to use, then people start using it, like, everywhere and they start having, like, new ideas. The same that happened with internet, before having broadband and after having that. So, people might have said like, \"Why do I need, like, more bandwidth if I am already okay?\" And then you have, of course, all these streaming services, YouTube, social media and other things that were unthinkable before this. So, I think that we may be close to a moment where ZK, uh, can be used in many different places, even outside, uh, blockchain, because the main thing that it offers us is integrity, showing that things are done correctly without even having to, uh, look at it."
  },
  {
    "speaker": "Rob",
    "content": "So, here is an idea, if you want to see of how, uh, uh, Aligned is, is working. So, basically what you'll, you'll have are just, um, users using the CLI to send their proof and some data to this, uh, verifier task batcher. Okay? That is going to receive the tasks and then create, uh, a batch. Okay? So, what it does then it, once it gets, like, enough proofs, it posts all the, the data to, to Ethereum. In fact, what it posts is the, the root of a Merkle tree containing all the data commitment to the data. And with that it creates a, a new task. Okay? Then the, um, AVS operators what they do is, they receive a notification that there is a new task, and what they, what they do is, okay, they go fetch all the information from a data service. They download all the proofs, run all the verification, and then each of them, if they see that the proofs are valid, they sign a message with the root of the batch. This get sent, uh, to the BLS signature aggregator. It sees that it has quorum, aggregates the, the signatures, sends them to the service manager, and then the service manager just updates the state of the batch to verify. And then the only thing you have to do is, um, use your data and an authentication path to show that your proof is included in the batch, to check that your proof is valid. And then you can do whatever you like. And here, of course, we, we have, like, some information on how the payment system is going to work."
  },
  {
    "speaker": "Andy",
    "content": "Cool."
  },
  {
    "speaker": "Rob",
    "content": "But, overall it's, um, a nice and clean construction that you can use to verify proofs, and as, as, as I was telling you, you are not running on top of the EVM, or doing costly operations. It's pretty easy. And then maybe some other moment, I can talk a little bit more on how the payment system and everything is, is going to work, which has been one of the, uh, main focuses we had the, the last weeks."
  },
  {
    "speaker": "Andy",
    "content": "Yeah, yeah, that sounds great. I think this is a great overview of the, the cryptographic, uh, system as it works. Um, I would love to hear more about the, the economic system and the incentives at stake."
  },
  {
    "speaker": "Rob",
    "content": "Okay. Um, so, of course, then there are, like, some things that we are still thinking, uh, related to, um, uh, the AVS and, and, and all that that we have to talk with, with Eigen, but, um, the payment system is, uh, pretty straightforward. The idea is that what you do when you send the task is, um, say how much you are willing to pay, as a maximum, for your proof to get verified. And then what the batcher does is, it tries to build the biggest batch possible, trying to minimize the cost. And for example, if it sees that maybe bundling a thousand proofs, it gets, uh, like, a, a decent cost to include those thousand proofs and your proof, and you offer to pay less than that, of course, then you are not going to get inside that batch and you'll have to wait, um, longer. But, for example, if you said, \"Okay, I want to pay more\", but then we make a bigger batch, then you are only charged for the cost of the batch. And the idea is that you just make, um, uh, a small deposit, uh, you have an account, and then when you sign for the task and everything, if then we send it, the, the batcher is going to, um, pay"
  }
]