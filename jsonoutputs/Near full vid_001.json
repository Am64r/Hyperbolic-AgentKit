[
  {
    "speaker": "Rob",
    "content": "And again, as a user now this doesn't work, this doesn't work, it's not you know, it's not propagated there it's not in those slots, right? You are losing kind of all of the like user state that I cannot easily bring. And we are actually solving some of this, this is why chain signatures are being a big push because we're trying to solve some of this problems kind of on a web3 scale, like how do we actually make it such that user has their own account that can can actually transact on other chains. But again, like every time you launch a new thing, like it's still has different set of parameters, it still has different uh kind of you know, additional latency for transacting with it, still has, you know, RPCs going down, indexers, etcetera. And so the other question is costs, right? Because this cost at the end is cost that beared by users. And right now, I mean, right now, there's VC is kind of funding everything so uh it's a little bit hard to like be uh like like properly evaluating this but, you know, you can go back to the math, right? Like, user paying for transaction, right? That cost needs to cover validators running it, you know, whatever settlement, whatever the you know, DA, whatever the guarantees you have there, all the integrations, all the software maintenance, all the SREs that are, you know, sitting there running validators and all the other costs that kind of And the there you have a very much so uh benefit of having, you know, all of that on the same shared platform. Right? Like the more kind of people transacting the like the reality is like even now like even on very used platforms, right? Like we we're still subsidizing kind of all of these costs. So like every application just will not like we'll always be underwater and we and we see this right now, right? All of these applications, they're like using their token incentives but the reality is like there's not enough revenue being made even with sequencer revenue, etcetera, uh to do that. Now, sequencer revenue, MEV, etcetera, all of that is addressable for per specific use case, right? So you know, for swaps, we're all going into intent based swaps, the intent matching is happening off chain. You already not don't have on chain like validators cannot capture MEV. Uh like there is all kinds of ways, I mean, we discussed this with uh Tarun on white board how to do MEV protection for uniswap, like AMM pools as well where you you know, you you satisfy some mid-price and you take of difference to your uh stakeholders instead of to MEV bots. So like all of this is like, you know, solvable, uh for specific use case. And so and you can actually again, so like the costs are kind of shared between all the applications. The sovereignty is given to the user, and the kind of revenue, etcetera, can be, you know, generated in in a more systematic way with all the integrations to exchanges and all this stuff, right? It's still super hard to get like new things going, right? Even if it's in on dexes because somebody needs to list that and bridge that, etcetera."
  },
  {
    "speaker": "Andy",
    "content": "Yeah. Okay, so bunch of really, really great points there. Um, kind of the first being that this like this idea of sovereignty for like developers to build in their own playground, their own sandbox so they can make their own money is like it's looking at it from the wrong perspective. Like, we should be optimizing for what the users really are like after. And and what the users want is this experience which is composable, which is fluid, which is easy to operate in and doesn't require kind of the annoyances of like what one could say is like I guess cross-chain interoperability as we know now. Um among these."
  },
  {
    "speaker": "Rob",
    "content": "Well, important is that user ones kind of the same level of security, right? You don't want, like, you as a user never want to reason about security. Like that's not something that like, you know, you sit there is like So, 17 validators, is that bad or good? Like, oh, what's a Nakamoto coefficient? It's like, you know, that's not like Does it have all the audits? Like"
  },
  {
    "speaker": "Andy",
    "content": "Yeah. Okay. And the kind of on the more economic side, the idea of running of running your own kind of uh system, whether it be uh consensus and your your own nodes and uh your you know, your oracles and your RPCs and your block explorers and your all these different things for in individual chains. It it it it basically part of your point is that in a world right now where things are very kind of like uh uh like uh pushed up by uh early stage funding, that this kind of is just being absorbed by teams and isn't really a consideration. But like in time, when we're what when we need to reach real revenues, um and kind of product market fit, the idea of everybody having their own having to pay for all this own infrastructure is kind of problematic from a perspective of why not just do shared costs across an entire spectrum of apps and users and developers and teams. Okay. Two two Okay, so like both of those points. So, okay, so on the second point, I I I have a thesis, and I think a lot of people share it, that like the cost of infrastructure and software is basically going to trend very close to zero in crypto, where the cost of all these different like operations um is is kind of akin to like what software is in like on your phone or like a mobile app or like even just like Twitter as an example is free. All these different kind of like software applications are free, and so why not the infrastructure for crypto to be kind of uh trend towards zero uh as well, and just as different teams are kind of commoditizing each other, um, that the cost of running a chain what what is today was much less than what it was yesterday and will be far less tomorrow. And so I think that's kind of like what I would retort with with with regards to the cost idea. And then, with regards to like the composability and and security, on the composability side, I think what we're addressing right now is like the state of rollup interoperability and like chain abstraction as it is today, which again, I think is like is is what it is, but I think it's it's like we are very close to like at least getting some sort of standard in the Ethereum space. And I think in the broader crypto community, having these kind of like true chain-abstracted UX. So it's hard to make that argument now today, um but I think that like in the world of user experience perspective, while having your own a ton of app chains may never uh equate to just having like one chain, the the the experience is going to be far better than what it is today and will be solving kind of the first broader issue that you brought up with regards like the single state machine uh not being able to to to kind of scale. Now, the security is kind of like another question, right? Like is a centralized sequencer in today's format better or worse than a L1 with a small validator count? I would argue it's probably worse. Um, in the future and with decentralized sequencers, is it better? I would probably argue that some sort of decentralized coordinated block building is probably better than an L1 with low validator account. But that that's kind of a tough one to get over, but it does seem like the points that I'm rooting on like my my my current thesis on are kind of uh pushed out into the a future view of the world rather than what it is today, whereas it seems like where where you're coming from with regards kind of near sharding design um is very much like this is here, this is here and now and it's happening. So, uh perhaps there's a difference of time frames in our views, but also definitely curious to understand uh your perspective on those kind of uh on those two push backs."
  },
  {
    "speaker": "Rob",
    "content": "Yeah, yeah. Um I I appreciate those. So, the the cost one, indeed, like the cost right now is immense, right? Like running a full fully like fully rolled out, you know, your own chain is like anywhere from probably $20 million a year to $100 million a year, right? Depending on how much integrations and kind of how much like auxiliary stuff you need to have. And like if you have a separate VM or kind of more uh like you you're sharing the tooling, right? And I think the the the interesting thing was like the, you know, um like roll-up as a service and similar things, which are kind of like Okay, well we just have like one set of tooling that we're going to run on every chain. Um And so, you know, you can imagine that like some of this will get unified and it's like, you know, you still get some economy of scale even though um I guess, like developers developing the same stuff for all the rollups. But the thing is like then you kind of losing all of the sovereignty because like if you try if you built if you modify your EVM, now everything broke, right? And so now you need to like fork everything and hire engineers to do it. So I think that the important part here is is really it's about the this trade-off between how much it costs to to do to change things and innovate, right? Because, yeah, if you're using exactly the same stack you like just click to fork, then the cost is probably may lower because indeed the cost is Now, if we're talking about the future, we have, you know, the the second part about AI. We'll talk about that, how a lot of this things will indeed change. But yeah, I am talking about kind of now like uh you know, because kind of the question is as you're an application developer, you kind of need to decide what to do now. And as especially as you're planning to scale, what do you do now I think is really again now and like for next year is really important. Um I agree that like things will change but in a very different speed."
  }
]