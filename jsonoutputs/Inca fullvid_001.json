[
  {
    "speaker": "Guest",
    "content": "private and public key. Ah so basically the secret is also stored off-chain. Ah you also encrypt using this private key, so the secret actually never leaves the clients. Ah so in a way it's quite private, right? Ah encryption typically you depend on a third-party authority to help you decrypt that piece of information, so it could be a single key or it could be an MPC network, ah but essentially because there are risk around collusion, you can argue it's less private. Ah but maybe you know, privacy, the degree of privacy is also debatable right, we depending on your on your use case here. But this is just kinda like from a high level. Ah the third point here is around the encryption rule, so you know, when you have a system that's more commitment-based, typically the way it works is, if I transfer if Andy you transfer money to Robby, ah you essentially generate a ZK proof but also specify Robby's viewing key. So, Robby will will have a viewing key that he can utilize, you know, he he will have the private key associated with it to be able to decrypt. Ah but you co- you cannot have to like speci- that specify that ahead of time, during the proof generation. And so this also means that, you know, later on, if Robby loses his keys or wants to delegate viewing to a third-party, it's actually very rigid, it's very difficult because sort of like the delegation of the viewing is is done at the proof generation time, at the transfer time. Ah now in the encryption base, the encryption base system is actually a lot more flexible because there's just a single key that everyone shares and then you can basically um change the rules so that you know, someone else can can you know ah decrypt on your behalf if you wanted to. Ah the fourth point is around composability, so ah what makes FHE composable is the idea that you can store this encrypted data directly on the blockchain and so anyone can transform it. So, I can add to it, divide, multiply. So, it's the es- idea of a shared private state where the blockchain itself is the shared layer. And so so why does this uh matter, right? Uh it matters because blockchains are multiplayer systems, so if you think about DeFi, right, you're always interacting with some kind of shared pool ah for something like ah private voting, you are adding to a shared tally, right? And so having basically the encrypted blockchain state ah fully on-chain allows anyone to interact with this in a permissionless manner and do state transition in a permissionless manner, so the blockchain itself is the coordination layer. Uh the problem with ZK based uh approaches is because all the encrypted data are stored off-chain, or the circuits you know, the data logic is also stored off-chain, you also need you have this like prover verifier architecture where you know i- it's quite unique, I'll say, compared to your typical blockchain. Uh essentially you know, to coordinate states across multiple parties, you sort of need this centralized prover to uh do the tally on behalf of everyone, right, for example, for like a private voting. Now, the challenge with that is ZK cannot do state transition over encrypted data. I- it's not meant to do proofs over encrypted data, it has to be over plaintext. So there are there could be also information leakage risk because you need a centralized off-chain prover to coordinate the states and then do this transition, right? Ah and so"
  },
  {
    "speaker": "Andy",
    "content": "Real quick Remy, just on that on that point. Um with with all of those understandings with regards to the differences between uh like the ZK modeling of uh of en- encryption and proving versus the FHE model. Would you say that these technologies are complementary or competitive? I'm seeing different opinions on in like the research forums and also people throwing in like TEEs here as well as like being like somehow in the mix, like what is the what is the right mental model to think about the relationship between ZK, FHE, and even like TEEs as a bonus?"
  },
  {
    "speaker": "Guest",
    "content": "That's a really good question. They are essentially different tools, and I and they're particularly better suited for different purposes. So for example, ZK, extremely efficient for any large amounts of computes. Ah imagine you were to build a game like Pokemon, right? There are hundreds of moves and you wanna choose a hidden move, right? Ah you're better off validating the logic off-chain to make sure it's a valid move, generate the ZK proof out of it rather than do doing this on-chain over FHE. Ah so, you know, the sweet spot might from what I see is combining ZK and FHE, and also understanding, you know, what are the trade-offs of these cryptographies. Another exam- another example is, you know, if you wanted to break the linkage between the sender, recipients. Um you know I'll say ZK is probably more efficient in that way. Uh ob- obviously it's also quite controversial, right, return to the cash and things like that. But there are also practical reasons why sometimes you wanna break the linkage. Like I'll give you two examples: If you were to for example do supply chain, right, Coca-Cola does supply chain. Um all the vendors are are typically known, so it's okay for you to pay them on-chain, having traceability. You're just hiding the amounts that you're paying out to the vendors, so that's okay. But for example, in the case where you wanna visit a medical professional you actually wanna hide the fact that you have visited a medical professional in the first place, right? So this is where you actually do want to break the linkage between the sender, recipient, and this is where you know I'll say ZK based systems actually work fine uh and probably more private and more anonymous. Um so I guess, eh back to your point I do think there is room for both technologies. Uh what I'll say the encryption system does really well is this idea of composability, so any use cases that involve multiple parties, uh multiplayer systems. I think what ZK does really well is more around these single-player use cases, uh more around anonymity use cases, and around, I will say, things that require a lot, you know, computes use cases. Uh like including like uh something like a ZK passport, like if you wanna ah prove your age. Um, actually ZK works fine and it's actually great. Yeah, it makes sense. So"
  },
  {
    "speaker": "Andy",
    "content": "So, the combination of the two is what really gets you the desired outcome for you know, specific use cases that that want that um you know want that combination. You don't really see them as necessarily being uh directly competitive, but when put together there's there's going to be interesting use cases but ultimately um i- it seems like the privacy element strictly of uh FHE could be potentially seen as stronger in certain elements than ZK. However, ZK gives you that those kind of fast finality guarantees and these things that that you were speaking about previously. Um and so I think that like it's kind of a balance of trade-offs there."
  },
  {
    "speaker": "Guest",
    "content": "So so I'll go over a few examples now online uh to illustrate some way, you know, the advantages that uh encryption-based systems have. Um yeah. And and just quickly on the last point on key rotation. So, um you know in the commitment-based system you know everyone has his viewing key that's quite rigid. So, if Robby loses his key, it's very difficult to well it's you can't really rotate the keys, right? I- i- there's just there's some ah challenges, you al- you also cannot revoke access, right? Because these are predefined encrypted values under a specific viewing key. Now, in the encryption system, uh there are actually ways in FHE where you can also rotate the keys uh without, you know, just doing it over FHE directly. So uh I'll say key management's, uh I will say encryption systems are definitely uh a lot more flexible here."
  }
]